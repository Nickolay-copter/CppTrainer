#include<iostream>
#include<string>
#include<vector>
#include<algorithm>
#include<iomanip>
using namespace std;

void PrintInt(){
    int x;
    // должно вывести значение по умолчанию - 0 при первом вызове
    /*
    при втором запуске будет большое "непонятное значение". Пример показывает
    что значение непроинициализированных переменных в с++ неопределено. Принцип гласит - ты не платишь
    за то, что не используешь (Zero overhead principle). Т.е по сути - компилятор не будет
    тратить время на инициализацию переменной. Поэтому, всегда при объявлении переменных
    нужно их инициализировать, чтобы предохранить себя от того, что там может лежать какой-нибудь мусор 
    */
    cout << x <<endl;
}

void PrintDouble(){
    double pi = 3.14;
    cout << pi << endl;
}

void PrintParity(int x){
    /* 
    чтобы проинициализировать переменную в месте её объявления
    можно воспользоваться "тернарным оператором"
    */
    string parity = x % 2 == 0 ? "even" : "odd";
    /*
    if (x % 2 == 0){
        parity = "even";
    } else {
        parity = "odd";
    }
    */
    cout << x << " is " << parity << endl;
}

/*
Выделение части кода в инициализирующую функцию - хорошая практика
*/
string GetPositivity(int x){
    if (x > 0){
        return "positivity";
    } else if(x < 0){
        return "positivity";
    } else{
        return "zero";
    }    
}

void PrintPositivity(int x){
    /*
    отсутствие инициализации при объявлении типа string
    не так страшно как неинициализация int
    */
    string positivity = GetPositivity(x);
    /* такие условия можно вынести в отдельную функцию
    if (x > 0){
        positivity = "positivity";
    } else if(x < 0){
        positivity = "positivity";
    } else{
        positivity = "zero";
    }
    */
    cout << x << " is " << positivity << endl;
}

int main(){
    /*
    до того как мы не объявили переменную
    её вызывать нельзя
    cout << x;
    int x = 5;
    */
   {
    int x = 5;
    {
        cout << x;
    }
    cout << x;
   }
   /* 
   cout << x; здесь будет ошибка, так как x
   находится вне зоны видимости программы.
   Т.е. переменные видны только в том блоке кода операторных
   скобок, в котором они объявлены
   */
   /*
   Также не скомпилируется, так как вывод происходит вне операторных скобок
   if (1 > 0){
    int x = 5;
   }
   cout << x;
   */
    /* Также не скомпилируется
    for (int i = 0; i < 10; i++){
        int x = 5;
    }
    cout << i;
    */
    /*
    есть два сценария либо компилятор не разрешает переопределять переменную
    во внутреннем пространстве, либо наоборот - разрешает. В С++ - разрешает
    */
    /*
    но, так делать плохо :D. Надо стараться минимизировать область видимости переменных
    */
    cout << endl;
    string s = "hello";
    {
        string s = "world";
        cout << s << endl;
    }
    cout << s << endl;
    PrintInt();
    PrintDouble();
    PrintInt();
    PrintParity(3);
    PrintPositivity(0);
    return 0;
}
/*
Cлишком большая область видимости переменной, повышает вероятность 
её непреднамеренного использования
*/